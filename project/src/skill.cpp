//**************************************************************
//
// スキル
// Author : 髙野馨將
//
//**************************************************************

//==============================================================
// include
//==============================================================
#include "skill.h"
#include "skill_data_base.h"
#include "skill_entity.h"
#include "player_manager.h"
#include "enemy_manager.h"
#include "enemy.h"
#include "collision_sphere.h"

//--------------------------------------------------------------
// コンストラクタ
//--------------------------------------------------------------
CSkill::CSkill(int nPriority)
{

}

//--------------------------------------------------------------
// デストラクタ
//--------------------------------------------------------------
CSkill::~CSkill()
{

}

//--------------------------------------------------------------
// 初期化処理
//--------------------------------------------------------------
HRESULT CSkill::Init()
{
	// 初期化
	m_CT = 0;

	return S_OK;
}

//--------------------------------------------------------------
// 終了処理
//--------------------------------------------------------------
void CSkill::Uninit(void)
{
	// 破棄処理
	CTask::Uninit();
}

//--------------------------------------------------------------
// 更新処理
//--------------------------------------------------------------
void CSkill::Update(void)
{
	if (m_CT > 0)
	{// クールタイムがあれば減少させる
		m_CT--;
	}

#ifdef _DEBUG
	CDebugProc::Print("%sのクールタイム : %d\n", m_Name.c_str(),m_CT);
#endif // _DEBUG
}

//--------------------------------------------------------------
// スキル生成処理
//--------------------------------------------------------------
CSkill *CSkill::Create()
{
	// 生成処理
	CSkill* pSkill = new CSkill;
	pSkill->Init();

	return pSkill;
}

//--------------------------------------------------------------
// スキル
//--------------------------------------------------------------
bool CSkill::Skill()
{
	if (m_CT != 0)
	{
		return false;
	}

	// クールタイムがなければ当たり判定を生成する

	CSkillDataBase *pSkillData = CSkillDataBase::GetInstance();
	CSkillEntity* entity = pSkillData->GetAbility(m_Name)(m_apChara);

	// 親子関係の構築
	SetEndChildren(entity);

	// クールタイムの設定
	m_atkSpd = m_apChara->GetAtkSpd()->GetCurrent();
	m_CT = pSkillData->GetCT(m_Name) * m_atkSpd;

	return true;
}

//--------------------------------------------------------------
// スキルの設定
//--------------------------------------------------------------
void CSkill::SetSkill(std::string tag, CCharacter *chara)
{
	// 生成処理
	m_Name = tag;
	m_apChara = chara;
}